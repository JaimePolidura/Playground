// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0--rc3
// source: raft_node.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftNodeClient is the client API for RaftNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftNodeClient interface {
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	ReceiveLeaderHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*Void, error)
}

type raftNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftNodeClient(cc grpc.ClientConnInterface) RaftNodeClient {
	return &raftNodeClient{cc}
}

func (c *raftNodeClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := c.cc.Invoke(ctx, "/proto.RaftNode/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, "/proto.RaftNode/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) ReceiveLeaderHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.RaftNode/ReceiveLeaderHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftNodeServer is the server API for RaftNode service.
// All implementations must embed UnimplementedRaftNodeServer
// for forward compatibility
type RaftNodeServer interface {
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	ReceiveLeaderHeartbeat(context.Context, *HeartbeatRequest) (*Void, error)
	mustEmbedUnimplementedRaftNodeServer()
}

// UnimplementedRaftNodeServer must be embedded to have forward compatible implementations.
type UnimplementedRaftNodeServer struct {
}

func (UnimplementedRaftNodeServer) RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRaftNodeServer) AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRaftNodeServer) ReceiveLeaderHeartbeat(context.Context, *HeartbeatRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveLeaderHeartbeat not implemented")
}
func (UnimplementedRaftNodeServer) mustEmbedUnimplementedRaftNodeServer() {}

// UnsafeRaftNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftNodeServer will
// result in compilation errors.
type UnsafeRaftNodeServer interface {
	mustEmbedUnimplementedRaftNodeServer()
}

func RegisterRaftNodeServer(s grpc.ServiceRegistrar, srv RaftNodeServer) {
	s.RegisterService(&RaftNode_ServiceDesc, srv)
}

func _RaftNode_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RaftNode/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RaftNode/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_ReceiveLeaderHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).ReceiveLeaderHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RaftNode/ReceiveLeaderHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).ReceiveLeaderHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftNode_ServiceDesc is the grpc.ServiceDesc for RaftNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RaftNode",
	HandlerType: (*RaftNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _RaftNode_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _RaftNode_AppendEntries_Handler,
		},
		{
			MethodName: "ReceiveLeaderHeartbeat",
			Handler:    _RaftNode_ReceiveLeaderHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft_node.proto",
}
