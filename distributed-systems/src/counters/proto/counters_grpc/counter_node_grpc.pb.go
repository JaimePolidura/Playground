// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0--rc3
// source: counter_node.proto

package counters_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CounterNodeClient is the client API for CounterNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterNodeClient interface {
	Update(ctx context.Context, in *UpdateCounterRequest, opts ...grpc.CallOption) (*UpdateCounterResponse, error)
}

type counterNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterNodeClient(cc grpc.ClientConnInterface) CounterNodeClient {
	return &counterNodeClient{cc}
}

func (c *counterNodeClient) Update(ctx context.Context, in *UpdateCounterRequest, opts ...grpc.CallOption) (*UpdateCounterResponse, error) {
	out := new(UpdateCounterResponse)
	err := c.cc.Invoke(ctx, "/proto.CounterNode/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterNodeServer is the server API for CounterNode service.
// All implementations must embed UnimplementedCounterNodeServer
// for forward compatibility
type CounterNodeServer interface {
	Update(context.Context, *UpdateCounterRequest) (*UpdateCounterResponse, error)
	mustEmbedUnimplementedCounterNodeServer()
}

// UnimplementedCounterNodeServer must be embedded to have forward compatible implementations.
type UnimplementedCounterNodeServer struct {
}

func (UnimplementedCounterNodeServer) Update(context.Context, *UpdateCounterRequest) (*UpdateCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCounterNodeServer) mustEmbedUnimplementedCounterNodeServer() {}

// UnsafeCounterNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterNodeServer will
// result in compilation errors.
type UnsafeCounterNodeServer interface {
	mustEmbedUnimplementedCounterNodeServer()
}

func RegisterCounterNodeServer(s grpc.ServiceRegistrar, srv CounterNodeServer) {
	s.RegisterService(&CounterNode_ServiceDesc, srv)
}

func _CounterNode_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterNodeServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CounterNode/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterNodeServer).Update(ctx, req.(*UpdateCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CounterNode_ServiceDesc is the grpc.ServiceDesc for CounterNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CounterNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CounterNode",
	HandlerType: (*CounterNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _CounterNode_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter_node.proto",
}
